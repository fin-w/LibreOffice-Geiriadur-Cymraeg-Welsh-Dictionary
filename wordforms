#!/bin/sh

# check for incorrect number of arguments
case $# in
	0|1|2) echo "Usage: wordforms [-s | -p] dictionary.aff dictionary.dic word
-s: print only suffixed forms
-p: print only prefixed forms";
	exit 1;;
esac
# this switches whether to print only suffixed, prefixed or all forms of stem
fx=0
case $1 in
	-s) fx=1; shift;;
	-p) fx=2; shift;;
esac
# clear any previous temporary dictionary
test -h /tmp/wordforms.aff && rm /tmp/wordforms.aff
# make a symbolic link of the aff file
ln -s "$PWD/$1" /tmp/wordforms.aff

# find all lines exactly matching the search
# stem, plus optional forward slash and flags
entries=""
count=0
for entry in $( awk -v stem="$3" '$1 ~ "^"stem"[/$]" {print $1}' $2 ) ; do
	[ ! -z $entries ] && entries="$entries|$entry"
	[ -z $entries ] && entries="$entry"
	count=$((count+1))
done
# if no stem was found then exit
[ $count -eq 0 ] && return 1
# number of stems found is the number of entries
# in the temporary dictionary
echo "$count" > /tmp/wordforms.dic
# add entries to temporary dictionary
echo "$entries" | sed 's/|/\n/g' >> /tmp/wordforms.dic

flag_type="unicode"
case "$( awk '/^FLAG/ && NF>1 { print $2; exit 0; }' $1 )" in
	num) flag_type="num";;
	long) flag_type="long";;
esac

# generate the different potential words
awk -v fx="$fx" -v flag_type="$flag_type" -v dic_entries="$entries" '
BEGIN {
	#debug("BEGIN AWK")
	delete prefixes_fitting_stem
	delete suffixes_fitting_stem
	delete prefixes_used_by_subflags
	delete suffixes_used_by_subflags
	all_suffixes_regex="("
	all_prefixes_regex="("
	delete rule_to_subflags_map
	sub_flags=""
	
	
	delete all_variations
	delete to_be_processed
	
	flag_type="unicode"
	stem=""
	
	for (line in dic_lines) {
		split(dic_lines[line], stem_and_flags, "/")
		stem=stem_and_flags[1]
	}
	# generate regex matching all flags used by the stem
	
	split(dic_entries, dic_lines, "|")
	for (line in dic_lines) {
		split(dic_lines[line], stem_and_flags, "/")
		stem=stem_and_flags[1]
		if (stem_and_flags[2]) stem_flags=stem_flags stem_and_flags[2] (flag_type=="num" ? "," : "");
	}
	# generate regex matching all flags used by the stem
	flag_regex="("get_regex_from_flags((flag_type=="num" ? substr(stem_flags, 1, length(stem_and_flags)) : stem_flags))")"
	# don t process the .aff if there is only one acceptable word
	if (flag_regex=="()") exit;
}

function debug(text) {
	print text >"/dev/tty"
}

function affix_word(word, input_flags, location, affix_level) {
	#debug("\nCALL START\n â†’ word <" word "> + input_flags <" input_flags "> + location <" location ">")
	return_value=0
	#separate the flags
	#for each flag
	local_flag_regex=get_regex_from_flags(input_flags)
	#print "input flags: " input_flags >"/dev/tty"
	#for 
	split(local_flag_regex, individual_flags, "|")
	for (local_flag in individual_flags) {
		#debug("checking stem and flag: " word " + " individual_flags[local_flag])
		if (individual_flags[local_flag] ~ "^"all_suffixes_regex"$" && fx!=2) {
			#debug("- " individual_flags[local_flag] " is SFX")
			if (location ~ "^(3|34|345)$") {
				#debug("-- (3|34|345) suffixing the stem, location: " location " , affix_level: " affix_level)
				if (affix_level == 1 ) {
					#debug("--- OPTIMISED SUFFIXING STEM WITH " length(first_level_suffixes_fitting_stem) " SUFFIXES")
					if (add_stem_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, first_level_suffixes_fitting_stem)) return_value = 1;
				}
				else {
					#debug("--- NORMAL SUFFIXING STEM")
					if (add_stem_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, suffixes_fitting_stem)) return_value = 1;
				}
			}
			else if (location ~ "^(34|234)$" && !complex_prefixes) {
				#debug("-- (34|234) processing suffixed stem, location: " location " , affix_level: " affix_level)
				if (affix_level == 2) {
					#debug("--- subflagging: " word "," input_flags ", level==" affix_level ", location==" location)
					if (add_outer_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, suffixes_used_by_subflags)) return_value = 1;
				}
				else {
					#debug("--- affix_level==" affix_level "so suffixing with entire DB")
					if (add_outer_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, suffixes_db)) return_value = 1;
				}
			}
			else {
				#debug("#------------ deleting an entry: " to_be_processed[word "/" input_flags "/" location "/" affix_level])
				delete to_be_processed[word "/" input_flags "/" location "/" affix_level]
			}
		}
		else if (individual_flags[local_flag] ~ "^"all_prefixes_regex"$" && fx!=1) {
			#debug("- " individual_flags[local_flag] " is PFX")
			if (location ~ "^(3|34|345)$") {
				#debug("-- (3|34|345) prefixing the stem, location: " location " , affix_level: " affix_level)
				if (affix_level == 1 ) {
					#debug("--- OPTIMISED PREFIXING with " length(first_level_prefixes_fitting_stem) " PREFIXES")
					if (add_stem_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, first_level_prefixes_fitting_stem)) return_value = 1;
				}
				else {
					if (add_stem_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, prefixes_fitting_stem)) return_value = 1;
				}
			}
			else if (location ~ "^(23|234)$" && complex_prefixes) {
				#debug("-- (23|234) processing prefixed stem, location: " location " , affix_level: " affix_level)
				if (affix_level == 2) {
					#debug("--- subflagging: " word "," input_flags ", level==" affix_level ", location==" location)
					if (add_outer_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, prefixes_used_by_subflags)) return_value = 1;
				}
				else {
					#debug("--- affix_level==" affix_level "so suffixing with entire DB")
					if (add_outer_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, prefixes_db)) return_value = 1;
				}
			}
			else {
				#debug("#------------ deleting an entry: " to_be_processed[word "/" input_flags "/" location "/" affix_level])
				delete to_be_processed[word "/" input_flags "/" location "/" affix_level]
			}
		}
		#debug("---- in affixed to_be_processed length is " length(to_be_processed))
	}
	#debug("function thinks to be processed length is " length(to_be_processed))
	#debug("CALL END\n")
	return return_value
}

function add_stem_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, relevant_suffixes,	return_value) {
	return_value = 0
	for (touching_suffix in relevant_suffixes) {
		#debug(touching_suffix)
		#if (affix_level==1 && !first_level_suffixes_fitting_stem[touching_suffix]) continue;
		split(suffixes_fitting_stem[touching_suffix], affix_particles)
		#debug("--- " individual_flags[local_flag] " , " affix_particles[2])
		if (affix_particles[2]!=individual_flags[local_flag]) continue;
		split(affix_particles[4], add_and_flags, "/")
		cut_chars=(affix_particles[3]=="0" ? 0 : length(affix_particles[3])) # TODO is it possible to just add subflags to stem and send to be processed, if the bit to add is zero?
		affixed_word=substr(word, 1, length(word)-cut_chars) (add_and_flags[1]=="0" ? "": add_and_flags[1])
		#debug("--- created suffixed word: " affixed_word)
		if (!fx && location !~ 1) {
			# strip out the other suffixes at the same level as the one we re processing
			substring_flags=""
			#debug(all_suffixes_regex)
			split(input_flags, substring_flag_particles, all_suffixes_regex)
			for(i in substring_flag_particles) {
				substring_flags=substring_flags substring_flag_particles[i]
			}
			#debug("prefixes flags: " substring_flags)
			if (substring_flags) {
				return_value=1
				to_be_processed[affixed_word "/" substring_flags "/" location "/" affix_level]=affixed_word "/" substring_flags
			}
			#debug("-- to be processed (same level): " affixed_word "/" substring_flags "/" location)
		}
		if (add_and_flags[2] && !complex_prefixes && location !~ 5) {
			return_value=1
			to_be_processed[affixed_word "/" add_and_flags[2] "/" location "4/" (affix_level+1)]=affixed_word "/" add_and_flags[2]
			#debug("MORE TO PROCESS: " length(to_be_processed))
			#debug("---- to be processed (lower level): " affixed_word "/" add_and_flags[2] "/" location "4")
		}
		all_variations[affixed_word]=affixed_word
		delete to_be_processed[word "/" input_flags "/" location "/" affix_level]
	}
	#debug("-------- in optimised suff to_be_processed length is " length(to_be_processed))
	return return_value
}

function add_outer_suffix(word, input_flags, location, affix_level, individual_flags, local_flag, relevant_suffixes,	return_value) {
	return_value=0
	for (non_touching_suffix in relevant_suffixes) {
		if (relevant_suffixes[non_touching_suffix]!=individual_flags[local_flag]) continue;
			#debug("skipping --" relevant_suffixes[non_touching_suffix] " != " individual_flags[local_flag]"--"); continue;
		split(non_touching_suffix, affix_particles)
		#debug("---- sub suffix- matched suffix " affix_particles[2])
		split(affix_particles[4], add_and_flags, "/")
		cut_chars=(affix_particles[3]=="0" ? 0 : length(affix_particles[3]))
		affixed_word=substr(word, 1, length(word)-cut_chars) (add_and_flags[1]=="0" ? "": add_and_flags[1])
		#debug("--- created sub suffixed word: " affixed_word)
		if (add_and_flags[2]) {
			return_value=1
			to_be_processed[affixed_word "/" add_and_flags[2] "/" location "5/" (affix_level+1)]=affixed_word "/" add_and_flags[2]
		}
		#debug("    given " word " + " local_flag)
		all_variations[affixed_word]=affixed_word
		delete to_be_processed [word "/" input_flags "/" location "/" affix_level]
	}
	#debug("length" length(relevant_suffixes))
	return return_value
}

function add_stem_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, relevant_prefixes, 	return_value) {
	return_value = 0
	for (touching_prefix in relevant_prefixes) {
		#debug(touching_prefix)
		#if (affix_level==1 && !first_level_prefixes_fitting_stem[touching_prefix]) continue;
		split(relevant_prefixes[touching_prefix], affix_particles)
		#debug("--- " individual_flags[local_flag] " , " affix_particles[2])
		if (affix_particles[2]!=individual_flags[local_flag]) continue;
		split(affix_particles[4], add_and_flags, "/")
		cut_chars=(affix_particles[3]=="0" ? 0 : length(affix_particles[3]))
		affixed_word=(add_and_flags[1]=="0" ? "": add_and_flags[1]) substr(word, cut_chars+1)
		if (!fx && location !~ 5) {
			# strip out the other suffixes at the same level as the one we re processing
			substring_flags=""
			#debug(all_suffixes_regex)
			split(input_flags, substring_flag_particles, all_prefixes_regex)
			for(i in substring_flag_particles) {
				substring_flags=substring_flags substring_flag_particles[i]
			}
			#debug("prefixes flags: " substring_flags)
			if (substring_flags) {
				return_value=1
				to_be_processed[affixed_word "/" substring_flags "/" location "/" affix_level]=affixed_word "/" substring_flags
			}
			#debug("-- to be processed (same level): " affixed_word "/" substring_flags "/" location)
		}
		if (add_and_flags[2] && complex_prefixes && location !~ 1) {
			return_value=1
			to_be_processed[affixed_word "/" add_and_flags[2] "/2" location "/" (affix_level+1)]=affixed_word "/" add_and_flags[2]
			#debug("MORE TO PROCESS: " length(to_be_processed))
			#debug("---- to be processed (lower level): " affixed_word "/" add_and_flags[2] "/" location "2")
		}
		all_variations[affixed_word]=affixed_word
		delete to_be_processed[word "/" input_flags "/" location "/" affix_level]
	}
	#debug("-------- in optimised pref to_be_processed length is " length(to_be_processed))
	return return_value
}

function add_outer_prefix(word, input_flags, location, affix_level, individual_flags, local_flag, relevant_prefixes,	return_value) {
	return_value=0
	for (non_touching_prefix in relevant_prefixes) {
		if (relevant_prefixes[non_touching_prefix]!=individual_flags[local_flag]) continue;
		split(non_touching_prefix, affix_particles)
		#debug("---- sub prefix- matched prefix " affix_particles[2])
		split(affix_particles[4], add_and_flags, "/")
		cut_chars=(affix_particles[3]=="0" ? 0 : length(affix_particles[3]))
		affixed_word=(add_and_flags[1]=="0" ? "": add_and_flags[1]) substr(word, cut_chars+1)
		#debug("--- created sub prefixed word: " affixed_word)
		if (add_and_flags[2]) {
			return_value=1
			to_be_processed[affixed_word "/" add_and_flags[2] "/1" location "/" (affix_level+1)]=affixed_word "/" add_and_flags[2]
		}
		all_variations[affixed_word]=affixed_word
		delete to_be_processed[word "/" input_flags "/" location "/" affix_level]
	}
	return return_value
}

function get_regex_from_flags(input_flags) {
	delete flag_array
	delete long_flags
	output_regex=""
	temp=""
	
	if (input_flags) {
		split(input_flags, flag_particles, (flag_type=="num" ? "," : "" ))
		if (flag_type=="long") {
			if (length(input_flags)<2) return 0;
			for (i in flag_particles) {
				temp=temp flag_particles[i]
				if (length(temp)==2) {
					#flag_particles[i] && flag_particles[i-1] &&) {
					long_flags[temp]=temp
					temp=""
				}
			}
			for (i in long_flags) {
				flag_array[length(flag_array)+1]=long_flags[i]
			}
		}
		else {
			for (i in flag_particles) {
				flag_array[length(flag_array)+1]=flag_particles[i]
			}
		}
		for (flag in flag_array) {
			if (flag_array[flag]) {
				output_regex=output_regex flag_array[flag] "|"
				#(flag_type!="unicode" ? "|" : "")
			}
		}
		output_regex=substr(output_regex, 1, (length(output_regex) - 1))
		return output_regex
	}
	else {
		return 0
	}
}

# get some .aff settings to help
# optimise the affixed word generation
/^COMPLEXPREFIXES/ { complex_prefixes="yes"; next }

# this runs on the .aff file to get affix data
/^PFX/ && fx!=1 && NF>4 && $4 !~ "[1-9][0-9]*" {
	# TODO can any more affixes be removed?
	split($4,add_and_flags,"/")
	#clen=($3=="0") ? 0 : length($3)
	prefixes_db[$0]=$2
	all_prefixes_regex=all_prefixes_regex $2 "|"
	rule_to_subflags_map[$0]=add_and_flags[2]
	if (stem ~ "^"$5".*") {
		prefixes_fitting_stem[$0]=$0;
		if ($2 ~ "^"flag_regex"$") {
			first_level_prefixes_fitting_stem[$0]=$0
			if (add_and_flags[2]) {
				sub_flags=subflags add_and_flags[2] (flag_type=="num" ? "," : "")
			}
		}
	}
	next
}

# this runs on the .aff file to get affix data
/^SFX/ && fx!=2 && NF>4 && $4 !~ "[1-9][0-9]*" {
	# TODO can any more affixes be removed?
	split($4,add_and_flags,"/")
	#clen=($3=="0") ? 0 : length($3)
	suffixes_db[$0]=$2
	all_suffixes_regex=all_suffixes_regex $2 "|"
	rule_to_subflags_map[$0]=add_and_flags[2]
	
	if (stem ~ ".*"$5"$") {
		suffixes_fitting_stem[$0]=$0
		if ($2 ~ "^"flag_regex"$") {
			first_level_suffixes_fitting_stem[$0]=$0
			if (add_and_flags[2]) {
				sub_flags=subflags add_and_flags[2] (flag_type=="num" ? "," : "")
			}
		}
	}
	next
}

# this runs after processing the .aff file
END {
	# get regex matching all subflags used
	sub_flag_regex=get_regex_from_flags(sub_flags)
	if (sub_flag_regex) {
		sub_flag_regex="(" sub_flag_regex ")"
		#debug("subflags: " sub_flags)
		#debug("subflags regex: " sub_flag_regex)
		# get any rules that are referenced by a flag that a .dic file stem uses
		for (rule in suffixes_db) { #get rid of rule to subfalgs? idk...
			#debug(rule "\t" rule_to_subflags_map[rule] "\t" suffixes_db[rule] "\t" sub_flag_regex)
			if (suffixes_db[rule] ~ "^"sub_flag_regex"$") {
				#debug("subflag match: " rule)
				# rule data in the array reference string (`rule`), array contains the rule name only
				suffixes_used_by_subflags[rule]=suffixes_db[rule]
			}
		}
		for (rule in prefixes_db) {
			if (prefixes_db[rule] ~ "^"sub_flag_regex"$") {
				# rule data in the array reference string (`rule`), array contains the rule name only
				prefixes_used_by_subflags[rule]=prefixes_db[rule]
			}
		}
	}
	#debug("length of flagged prefixes / suffixes (total / total): " length(first_level_prefixes_fitting_stem) " / " length(first_level_suffixes_fitting_stem) " (" length(prefixes_db) " / " length(suffixes_db) ")")
	#debug("length of subflagged prefixes / suffixes (total / total): " length(prefixes_used_by_subflags) " / " length(suffixes_used_by_subflags) " (" length(prefixes_db) " / " length(suffixes_db) ")")
	#debug("START END AWK")
	# if there are no variations to generate
	if (!flag_regex) { print stem; exit 0 }
	
	# generate some variables
	to_be_processed[stem "/" stem_flags "/3/1"]=stem "/" stem_flags
 	all_variations[stem]=stem
	stem_length=length(stem)
	#debug("all suffixes and prefixes in name arrays:")
	all_suffixes_regex=substr(all_suffixes_regex, 1, length(all_suffixes_regex)-1) ")"
	all_prefixes_regex=substr(all_prefixes_regex, 1, length(all_prefixes_regex)-1) ")"
	#debug("all prefixes: " all_prefixes_regex)
	#debug("all suffixes: " all_suffixes_regex)
	
	#debug("START LOOP")
	process=1
	while (process) {
		process=0
		for (entry in to_be_processed) {
			split(entry, entry_data, "/")
			#if (entry_data[2]>3) continue;
			split(to_be_processed[entry], word_and_flags, "/")
			if (word_and_flags[2] && entry_data[4] < 4) {
				#debug("FOR LOOPING add")
				#debug(to_be_processed[entry])
				if (affix_word(word_and_flags[1], word_and_flags[2], entry_data[3], entry_data[4])) process=1;
			}
			else {
				#debug("FOR LOOPING delete: word_and_flags[2] == " word_and_flags[2] " and entry_data[4] == " entry_data[4])
				process=1
				all_variations[word_and_flags[1]]=word_and_flags[1]
				delete to_be_processed[entry]
			}
		}
		#debug("END of loop to_be_processed length is " length(to_be_processed))
	}
	#debug("exited looping\n")
	
	#print "\n-------------------------------------------------\n" >"/dev/tty"
	#debug("\t\traw variations:")
	for (variation in all_variations) {
		# finally, print all the unique prefix / stem / suffix variations
		print all_variations[variation]
		#print all_variations[variation] >"/dev/tty"
	}
	#print "\n-------------------------------------------------\n" >"/dev/tty"
}
' /tmp/wordforms.aff | hunspell -d /tmp/wordforms -G -l | sort -u
