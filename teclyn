#!/bin/bash

###
# usage: ./teclyn -[a, b, e]
# -a gair
#       adds 'gair' to dictionary (may include
#       dictionary tags on the end e.g. /AFG).
# -b
#       builds the libreoffice package.
# -e gair
#       use 'wordforms' from hunspell to expand
#       the given word with all relevant
#       permitted affixes in the dictionary.
###

parse () {
	###
	# get command line options
	###
	case "$1" in
		-a|--add)
			ychwanegu "$2"
			shift
			;;
		-e|--expand)
			ystyried dictionaries/cy_GB.aff dictionaries/cy_GB.dic "$2" | sort -u
			shift
			;;
		-b|--build)
			adeiladu
			shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "Programming error"
			exit 3
			;;
	esac
}

ystyried () {
	###
	# expand a word with all available relevant affixes: the below is 'wordforms' from
	# https://github.com/hunspell/hunspell/blob/master/src/tools/wordforms
	###
	case $# in
	0|1|2) echo "Usage: wordforms [-s | -p] dictionary.aff dictionary.dic word
	-s: print only suffixed forms
	-p: print only prefixed forms
	"; exit 1;;
	esac
	fx=0
	case $1 in
	-s) fx=1; shift;;
	-p) fx=2; shift;;
	esac
	test -h /tmp/wordforms.aff && rm /tmp/wordforms.aff
	ln -s "$PWD/$1" /tmp/wordforms.aff
	# prepared dic only with the query word
	echo 1 >/tmp/wordforms.dic
	grep "^$3/" $2 >>/tmp/wordforms.dic
	echo $3 | awk -v "fx=$fx" '
	fx!=2 && FILENAME!="-" && /^SFX/ && NF > 4{split($4,a,"/");clen=($3=="0") ? 0 : length($3);sfx[a[1],clen]=a[1];sfxc[a[1],clen]=clen;next}
	fx!=1 && FILENAME!="-" && /^PFX/ && NF > 4{split($4,a,"/");clen=($3=="0") ? 0 : length($3);pfx[a[1],clen]=a[1];pfxc[a[1],clen]=clen;next}
	FILENAME=="-"{
	wlen=length($1)
	if (fx==0 || fx==2) {
	for (j in pfx) {if (wlen<=pfxc[j]) continue; print (pfx[j]=="0" ? "" : pfx[j]) substr($1, pfxc[j]+1)}
	}
	if (fx==0 || fx==1) {
	for(i in sfx){clen=sfxc[i];if (wlen<=clen) continue; print substr($1, 1, wlen-clen) (sfx[i]=="0" ? "": sfx[i]) }
	}
	if (fx==0) {
	for (j in pfx) {if (wlen<=pfxc[j]) continue;
	for(i in sfx){clen=sfxc[i];if (wlen<=clen || wlen <= (clen + pfxc[j]))continue;
	print (pfx[j]=="0" ? "" : pfx[j]) substr($1, pfxc[j]+1, wlen-clen-pfxc[j]) (sfx[i]=="0" ? "": sfx[i]) }}
	}
	}
	' /tmp/wordforms.aff - | hunspell -d /tmp/wordforms -G -l
}

adeiladu () {
	###
	# make the libreoffice extension
	###
	echo "Building..."
	#clean the folder of zips and oxts (which are just renamed zips)
	mv *.oxt archive/ 2> /dev/null
	mv *.zip archive/ 2> /dev/null

	# figure out which version we're building
	version=$(grep -rnw './description.xml' -e '<version value=')
	# remove xml stuff to just have the version data
	version=${version/*value=\"/}
	version=${version/\"*/}

	# zip the latest files
	zip -qr out.zip description/ META-INF/ dictionaries/cy_GB.dic dictionaries/cy_GB.aff baner_cymreig.png description.xml dictionaries.xcu LICENSE README.txt

	# rename the latest zip to oxt
	mv out.zip libreoffice-geiriadur-$version.oxt
	echo "Built."
}

ychwanegu () {
	###
	# add a word to the dictionary, optionally with prefix / suffix tags
	###
	# remove any dictionary tags from the end i.e. rhywedd/M becomes rhywedd
	gair=$(sed -e "s|/.*||" <<< "$1")
	anhysbys=$(hunspell -L -d dictionaries/cy_GB <<< "$gair")

	if [[ -n "$anhysbys" ]] ; then
		echo "Adding word \"$gair\" to dictionary"
		# Add word
		echo "$gair" >> dictionaries/word_list.txt
		echo "$1" >> dictionaries/cy_GB.dic
		# Write number of lines to tmp
		tail -n +2 dictionaries/cy_GB.dic | sort -u | wc -l > dictionaries/dict.tmp
		# Write sorted words to tmp
		tail -n +2 dictionaries/cy_GB.dic | WC_ALL=C sort -u >> dictionaries/dict.tmp
		# Copy tmp back to mwy.dic
		mv dictionaries/dict.tmp dictionaries/cy_GB.dic
		echo "Added word."
	else
		echo "\"$gair\" is already in dictionary"
	fi

	# contains any unknown words in the word list
	anhysbys=$(hunspell -L -d dictionaries/cy_GB dictionaries/word_list.txt)
	if [[ -n "$anhysbys" ]] ; then
		echo "The dictionary does not recognise the following:"
		echo "$anhysbys"
	else
		#echo "The dictionary recognises everything in the word list."
		echo ""
	fi
}


parse $1 $2
